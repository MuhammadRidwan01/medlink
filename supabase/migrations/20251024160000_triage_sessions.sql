-- Triage sessions and message history for AI-assisted consultations
create extension if not exists pgcrypto;

create schema if not exists clinical;

create table if not exists clinical.triage_sessions (
  id uuid primary key default gen_random_uuid(),
  patient_id uuid not null references auth.users(id) on delete cascade,
  doctor_id uuid references auth.users(id),
  status text not null default 'active' check (status in ('active', 'completed')),
  risk_level text check (risk_level in ('low', 'moderate', 'high', 'emergency')),
  summary jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  completed_at timestamptz
);

create table if not exists clinical.triage_messages (
  id bigint generated by default as identity primary key,
  session_id uuid not null references clinical.triage_sessions(id) on delete cascade,
  role text not null check (role in ('user', 'ai', 'system', 'doctor')),
  content text not null,
  metadata jsonb not null default '{}'::jsonb,
  created_at timestamptz not null default now()
);

create index if not exists triage_sessions_patient_idx on clinical.triage_sessions (patient_id);
create index if not exists triage_sessions_doctor_idx on clinical.triage_sessions (doctor_id);
create index if not exists triage_sessions_status_idx on clinical.triage_sessions (status);
create index if not exists triage_messages_session_idx on clinical.triage_messages (session_id);

create unique index if not exists triage_sessions_patient_active_uidx
  on clinical.triage_sessions (patient_id)
  where status = 'active';

alter table clinical.triage_sessions enable row level security;
alter table clinical.triage_messages enable row level security;

drop policy if exists patient_select_triage_sessions on clinical.triage_sessions;
create policy patient_select_triage_sessions
  on clinical.triage_sessions
  for select
  using (patient_id = auth.uid());

drop policy if exists patient_insert_triage_sessions on clinical.triage_sessions;
create policy patient_insert_triage_sessions
  on clinical.triage_sessions
  for insert
  with check (patient_id = auth.uid());

drop policy if exists patient_update_triage_sessions on clinical.triage_sessions;
create policy patient_update_triage_sessions
  on clinical.triage_sessions
  for update
  using (patient_id = auth.uid())
  with check (patient_id = auth.uid());

drop policy if exists doctor_select_triage_sessions on clinical.triage_sessions;
create policy doctor_select_triage_sessions
  on clinical.triage_sessions
  for select
  using (doctor_id = auth.uid());

drop policy if exists doctor_update_triage_sessions on clinical.triage_sessions;
create policy doctor_update_triage_sessions
  on clinical.triage_sessions
  for update
  using (doctor_id = auth.uid())
  with check (doctor_id = auth.uid());

drop policy if exists patient_select_triage_messages on clinical.triage_messages;
create policy patient_select_triage_messages
  on clinical.triage_messages
  for select
  using (
    exists (
      select 1 from clinical.triage_sessions s
      where s.id = session_id and s.patient_id = auth.uid()
    )
  );

drop policy if exists patient_insert_triage_messages on clinical.triage_messages;
create policy patient_insert_triage_messages
  on clinical.triage_messages
  for insert
  with check (
    exists (
      select 1 from clinical.triage_sessions s
      where s.id = session_id and s.patient_id = auth.uid()
    )
  );

drop policy if exists doctor_select_triage_messages on clinical.triage_messages;
create policy doctor_select_triage_messages
  on clinical.triage_messages
  for select
  using (
    exists (
      select 1 from clinical.triage_sessions s
      where s.id = session_id and s.doctor_id = auth.uid()
    )
  );

drop policy if exists doctor_insert_triage_messages on clinical.triage_messages;
create policy doctor_insert_triage_messages
  on clinical.triage_messages
  for insert
  with check (
    exists (
      select 1 from clinical.triage_sessions s
      where s.id = session_id and s.doctor_id = auth.uid()
    )
  );

create or replace function clinical.touch_triage_session()
returns trigger
language plpgsql
as $$
begin
  update clinical.triage_sessions
    set updated_at = now()
  where id = new.session_id;
  return new;
end;
$$;

drop trigger if exists trg_triage_messages_touch_session on clinical.triage_messages;
create trigger trg_triage_messages_touch_session
after insert or update on clinical.triage_messages
for each row execute function clinical.touch_triage_session();
