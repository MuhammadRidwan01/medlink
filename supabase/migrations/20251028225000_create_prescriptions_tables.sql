-- Migration: Create Prescriptions Tables
-- Date: 2025-10-28
-- Purpose: Create tables for prescription management

begin;

-- Create prescriptions table
CREATE TABLE IF NOT EXISTS public.prescriptions (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  patient_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  doctor_id uuid REFERENCES auth.users(id),
  triage_session_id uuid REFERENCES public.triage_sessions(id),
  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'active', 'completed', 'cancelled')),
  created_at timestamptz NOT NULL DEFAULT now(),
  updated_at timestamptz NOT NULL DEFAULT now()
);

-- Create prescription_items table
CREATE TABLE IF NOT EXISTS public.prescription_items (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  prescription_id uuid NOT NULL REFERENCES public.prescriptions(id) ON DELETE CASCADE,
  name text NOT NULL,
  code text,
  strength text,
  dose text,
  frequency text,
  duration text,
  notes text,
  created_at timestamptz NOT NULL DEFAULT now()
);

-- Create indexes
CREATE INDEX IF NOT EXISTS prescriptions_patient_id_idx ON public.prescriptions (patient_id);
CREATE INDEX IF NOT EXISTS prescriptions_doctor_id_idx ON public.prescriptions (doctor_id);
CREATE INDEX IF NOT EXISTS prescriptions_triage_session_id_idx ON public.prescriptions (triage_session_id);
CREATE INDEX IF NOT EXISTS prescriptions_status_idx ON public.prescriptions (status);
CREATE INDEX IF NOT EXISTS prescription_items_prescription_id_idx ON public.prescription_items (prescription_id);

-- Enable RLS
ALTER TABLE public.prescriptions ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.prescription_items ENABLE ROW LEVEL SECURITY;

-- RLS Policies for prescriptions
DROP POLICY IF EXISTS patient_view_prescriptions ON public.prescriptions;
CREATE POLICY patient_view_prescriptions
  ON public.prescriptions FOR SELECT
  USING (patient_id = auth.uid());

DROP POLICY IF EXISTS patient_create_prescriptions ON public.prescriptions;
CREATE POLICY patient_create_prescriptions
  ON public.prescriptions FOR INSERT
  WITH CHECK (patient_id = auth.uid());

DROP POLICY IF EXISTS patient_update_prescriptions ON public.prescriptions;
CREATE POLICY patient_update_prescriptions
  ON public.prescriptions FOR UPDATE
  USING (patient_id = auth.uid())
  WITH CHECK (patient_id = auth.uid());

DROP POLICY IF EXISTS doctor_view_prescriptions ON public.prescriptions;
CREATE POLICY doctor_view_prescriptions
  ON public.prescriptions FOR SELECT
  USING (doctor_id = auth.uid());

DROP POLICY IF EXISTS doctor_update_prescriptions ON public.prescriptions;
CREATE POLICY doctor_update_prescriptions
  ON public.prescriptions FOR UPDATE
  USING (doctor_id = auth.uid())
  WITH CHECK (doctor_id = auth.uid());

-- RLS Policies for prescription_items
DROP POLICY IF EXISTS patient_view_prescription_items ON public.prescription_items;
CREATE POLICY patient_view_prescription_items
  ON public.prescription_items FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.prescriptions p
      WHERE p.id = prescription_id AND p.patient_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS patient_insert_prescription_items ON public.prescription_items;
CREATE POLICY patient_insert_prescription_items
  ON public.prescription_items FOR INSERT
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.prescriptions p
      WHERE p.id = prescription_id AND p.patient_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS doctor_view_prescription_items ON public.prescription_items;
CREATE POLICY doctor_view_prescription_items
  ON public.prescription_items FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM public.prescriptions p
      WHERE p.id = prescription_id AND p.doctor_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS doctor_update_prescription_items ON public.prescription_items;
CREATE POLICY doctor_update_prescription_items
  ON public.prescription_items FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM public.prescriptions p
      WHERE p.id = prescription_id AND p.doctor_id = auth.uid()
    )
  )
  WITH CHECK (
    EXISTS (
      SELECT 1 FROM public.prescriptions p
      WHERE p.id = prescription_id AND p.doctor_id = auth.uid()
    )
  );

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_prescriptions_updated_at()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$;

-- Trigger to auto-update updated_at
DROP TRIGGER IF EXISTS prescriptions_updated_at_trigger ON public.prescriptions;
CREATE TRIGGER prescriptions_updated_at_trigger
  BEFORE UPDATE ON public.prescriptions
  FOR EACH ROW
  EXECUTE FUNCTION public.update_prescriptions_updated_at();

-- Add comments
COMMENT ON TABLE public.prescriptions IS 'Prescriptions created from AI triage or doctor consultations';
COMMENT ON TABLE public.prescription_items IS 'Individual medication items in a prescription';

COMMENT ON COLUMN public.prescriptions.status IS 'Prescription status: draft (being created), active (ready to use), completed (fulfilled), cancelled';
COMMENT ON COLUMN public.prescriptions.triage_session_id IS 'Link to triage session if prescription came from AI triage';

commit;
